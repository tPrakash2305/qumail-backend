import fetch from "node-fetch";
import { Buffer } from "buffer";

// ============================
// ⚠️ SECURITY: Use environment variables for credentials
// ============================

// 1️⃣ Your GitHub Personal Access Token (PAT) - NEVER hardcode this!
// Create a .env file and add: GITHUB_TOKEN=your_token_here
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;

if (!GITHUB_TOKEN) {
  console.error("❌ ERROR: GITHUB_TOKEN environment variable is not set!");
  console.error("   Create a .env file or set the environment variable.");
  process.exit(1);
}

// 2️⃣ GitHub username or organization
const OWNER = process.env.GITHUB_OWNER || "tPrakash2305";

// 3️⃣ Repository name
const REPO = process.env.GITHUB_REPO || "QuMail_prototype";

// 4️⃣ File path inside repo where key will be stored
const PATH = process.env.GITHUB_KEY_PATH || "keys/generated_key.txt";

// Key generated by your backend
const generatedKey = "THIS_IS_THE_NEW_KEY";  // Replace with the actual key

// ============================
// GitHub API URL for PUT request
// ============================
const url = `https://api.github.com/repos/${OWNER}/${REPO}/contents/${PATH}`;

// Encode content in Base64 (GitHub requires it)
const content = Buffer.from(generatedKey).toString("base64");

// Prepare payload
const body = {
  message: "Add new generated key",
  content: content,
};

// ============================
// Send request to GitHub
// ============================
(async () => {
  try {
    // Check if file already exists to get SHA
    let sha = null;
    const checkResponse = await fetch(url, {
      headers: { Authorization: `token ${GITHUB_TOKEN}` },
    });

    if (checkResponse.ok) {
      const existingFile = await checkResponse.json();
      sha = existingFile.sha;
      console.log(" File exists. Updating...");
    } else {
      console.log(" File does not exist. Creating new file...");
    }

    // Add SHA if updating
    if (sha) body.sha = sha;

    // Send PUT request to create/update file
    const response = await fetch(url, {
      method: "PUT",
      headers: {
        Authorization: `token ${GITHUB_TOKEN}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    });

    const data = await response.json();

    if (response.ok) {
      console.log(" Key uploaded successfully:", data.content.path);
    } else {
      console.error(" Failed to upload key:", data);
    }
  } catch (err) {
    console.error(" Error uploading key:", err);
  }
})();
